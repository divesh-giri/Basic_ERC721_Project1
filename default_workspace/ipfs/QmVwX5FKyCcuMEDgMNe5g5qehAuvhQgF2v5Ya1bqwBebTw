// Get funds from users
// Withdraw Funds
// Set a minimum funding value in USD

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.8;

import "./PriceConversion.sol";
import "hardhat/console.sol";

contract FundMe {

    using PriceConversion for uint256;

    uint256 public minimumUsd = 50 * 10 ** 18;

    address[] public funders;

    mapping(address => uint256) public addressToAmountFunded;

    address public owner;

    constructor() {
        owner = msg.sender;
    }

    function fund() public payable{
        // Want to be able to set a minimum fund amount in USD
        // 1. How to we send ETH to this contract?
        require(msg.value.getConversionRate()>=minimumUsd, "Didn't send enough"); // 1 * 10 ** 18
        funders.push(msg.sender);
        addressToAmountFunded[msg.sender] += msg.value;

        // What is reverting?
        // undo any action before, and send remaining gas back
        // aka, if the above require statement not fullfilled the condition then
        // all the prior statements will be undone.
        console.log(funders[0]);
    }


    function Withdraw() public onlyOwner {
        for(uint256 i=0; i < funders.length; i++) {
            address funder = funders[i];
            addressToAmountFunded[funder] = 0;
        }

        // reset the array
        funders = new address[](0);


        // 3. call
        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}("");
        require(callSuccess, "Call Failed");

        
    }

    modifier onlyOwner {
        require(msg.sender == owner, "Sender is not the owner");
        _;
    }

    
}
// 1,769.96000000